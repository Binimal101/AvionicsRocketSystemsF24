'''[
    [1.0, 0.0, 0.0, 0.0],        # Starting position (identity quaternion)
    [0.923, 0.382, 0.0, 0.0],    # Pitch 45 degrees
    [0.707, 0.707, 0.0, 0.0],    # Pitch 90 degrees
    [0.5, 0.866, 0.0, 0.0],      # Pitch 120 degrees
    [0.0, 1.0, 0.0, 0.0],        # Pitch 180 degrees
    [-0.5, 0.866, 0.0, 0.0],     # Pitch 240 degrees
    [-0.707, 0.707, 0.0, 0.0],   # Pitch 270 degrees
    [-0.923, 0.382, 0.0, 0.0],   # Pitch 315 degrees
    [-1.0, 0.0, 0.0, 0.0],       # Pitch 360 degrees (back to starting rotation)
    [-0.923, 0.0, 0.382, 0.0],   # Yaw 45 degrees
    [-0.707, 0.0, 0.707, 0.0],   # Yaw 90 degrees
    [-0.5, 0.0, 0.866, 0.0],     # Yaw 120 degrees
    [0.0, 0.0, 1.0, 0.0],        # Yaw 180 degrees
    [0.5, 0.0, 0.866, 0.0],      # Yaw 240 degrees
    [0.707, 0.0, 0.707, 0.0],    # Yaw 270 degrees
    [0.923, 0.0, 0.382, 0.0],    # Yaw 315 degrees
    [1.0, 0.0, 0.0, 0.0],        # Yaw 360 degrees (back to starting rotation)
    [0.923, 0.0, 0.0, 0.382],    # Roll 45 degrees
    [0.707, 0.0, 0.0, 0.707],    # Roll 90 degrees
    [0.5, 0.0, 0.0, 0.866],      # Roll 120 degrees
    [0.0, 0.0, 0.0, 1.0],        # Roll 180 degrees
    [-0.5, 0.0, 0.0, 0.866],     # Roll 240 degrees
    [-0.707, 0.0, 0.0, 0.707],   # Roll 270 degrees
    [-0.923, 0.0, 0.0, 0.382],   # Roll 315 degrees
    [-1.0, 0.0, 0.0, 0.0]        # Roll 360 degrees (back to starting rotation)
]


# Visualize rotation based on quaternion data
animate_rotation(quaternion_data)
'''
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Function to convert quaternion to rotation matrix
def quaternion_to_rotation_matrix(q):
    """
    Convert a quaternion to a 3x3 rotation matrix.
    :param q: Quaternion [w, x, y, z]
    :return: 3x3 rotation matrix
    """
    w, x, y, z = q
    return np.array([
        [1 - 2 * (y**2 + z**2), 2 * (x * y - z * w), 2 * (x * z + y * w)],
        [2 * (x * y + z * w), 1 - 2 * (x**2 + z**2), 2 * (y * z - x * w)],
        [2 * (x * z - y * w), 2 * (y * z + x * w), 1 - 2 * (x**2 + y**2)]
    ])

# Function to animate 3D rotation
def animate_rotation(quaternions, interval=100):
    """
    Animate a 3D object rotation based on quaternion data.
    :param quaternions: List of quaternions
    :param interval: Time between frames in milliseconds
    """
    fig = plt.figure(figsize=(10, 10))
    ax = fig.add_subplot(111, projection='3d')

    # Set up axis limits and labels
    ax.set_xlim([-1.5, 1.5])
    ax.set_ylim([-1.5, 1.5])
    ax.set_zlim([-1.5, 1.5])
    ax.set_xlabel("X", fontsize=12)
    ax.set_ylabel("Y", fontsize=12)
    ax.set_zlabel("Z", fontsize=12)
    ax.set_title("3D Quaternion Rotation Visualization", fontsize=15)

    # Add a grid and custom aspect ratios
    ax.grid(color='gray', linestyle='--', linewidth=0.5)
    ax.set_box_aspect([1, 1, 1])  # Equal scaling

    # Create the initial vector to be rotated
    vector = np.array([1, 0, 0])  # Red arrow, initially along X-axis
    arrow, = ax.plot([0, vector[0]], [0, vector[1]], [0, vector[2]], color='red', lw=3, label="Rotating Vector")

    # Add a static frame for reference
    static_vectors = [
        ([1, 0], [0, 0], [0, 0]),  # X-axis
        ([0, 0], [1, 0], [0, 0]),  # Y-axis
        ([0, 0], [0, 0], [1, 0]),  # Z-axis
    ]
    colors = ['blue', 'green', 'purple']
    for vec, color in zip(static_vectors, colors):
        ax.plot(*vec, color=color, lw=2, alpha=0.6, linestyle="dashed")

    # Animation function
    def update(frame):
        rotation_matrix = quaternion_to_rotation_matrix(quaternions[frame])
        rotated_vector = rotation_matrix @ vector
        arrow.set_data([0, rotated_vector[0]], [0, rotated_vector[1]])
        arrow.set_3d_properties([0, rotated_vector[2]])
        return arrow,

    # Create animation
    ani = FuncAnimation(fig, update, frames=len(quaternions), interval=interval, blit=True)

    # Add legend and display
    ax.legend(loc='upper left', fontsize=10)
    plt.show()

# Example quaternion data for testing
quaternion_data = [    
    [1.0, -0.00030517578125, -6.103515625e-05, 0.0],
    [7.36212883e-012, 2.19521451e-016, 6.40156886e-01, 2.90207772e-04],
    [0.0838623046875, 0.323486328125, 0.9425048828125, 0.00042724609375],
    [8.39551906e-02, 3.23430424e-01, 9.42519838e-01, 7.32437107e-04],
    [0.08404541015625, 0.3233642578125, 0.9425048828125, 0.00103759765625],
    [0.08508341, 0.32367106, 0.94232654, 0.00341793],
    [0.08612060546875, 0.323974609375, 0.942138671875, 0.00579833984375],
    [0.09246652, 0.323938, 0.94138855, 0.01394626],
    [0.09881591796875, 0.32391357421875, 0.940673828125, 0.0220947265625],
    [0.11204591, 0.32753036, 0.93760174, 0.03275004],
    [0.125244140625, 0.3310546875, 0.93426513671875, 0.04339599609375],
    [0.11495997, 0.33102525, 0.93561098, 0.04156505],
    [0.10467529296875, 0.33099365234375, 0.93695068359375, 0.03973388671875],
    [0.10434066, 0.330112, 0.93711279, 0.04403729],
    [0.10400390625, 0.3292236328125, 0.937255859375, 0.04833984375],
    [0.09436042, 0.33361824, 0.93698146, 0.04119877],
    [0.084716796875, 0.3380126953125, 0.93670654296875, 0.0340576171875],
    [0.07006779, 0.33498113, 0.93957734, 0.00851836],
    [0.05535888671875, 0.3316650390625, 0.941650390625, -0.01702880859375],
    [0.02624576, 0.3291677, 0.94219043, -0.0568944],
    [-0.0029296875, 0.32586669921875, 0.9404296875, -0.09661865234375],
    [-0.03179728, 0.32476601, 0.93329724, -0.14990743],
    [-0.060546875, 0.32244873046875, 0.92266845703125, -0.20263671875],
    [-0.07838741, 0.3218595, 0.9117215, -0.24295223],
    [-0.0960693359375, 0.32061767578125, 0.89892578125, -0.28277587890625],
    [-0.10804201, 0.31316207, 0.88946605, -0.314812],
    [-0.119873046875, 0.3052978515625, 0.87884521484375, -0.346435546875],
    [-0.13379071, 0.29859631, 0.86658446, -0.37679127],
    [-0.14654541015625, 0.28955078125, 0.84747314453125, -0.4039306640625],
    [-0.16764354, 0.29141846, 0.83527502, -0.43507075],
    [-0.1875, 0.2908935546875, 0.81610107421875, -0.46282958984375],
    [-0.22225339, 0.29994482, 0.7865689, -0.49187996],
    [-0.25634765625, 0.30810546875, 0.75469970703125, -0.51947021484375],
    [-0.29313101, 0.312903, 0.72347512, -0.54106346],
    [-0.3291015625, 0.31683349609375, 0.69024658203125, -0.5611572265625],
    [-0.34898404, 0.31433913, 0.65788489, -0.58871769],
    [-0.36810302734375, 0.3111572265625, 0.62408447265625, -0.614990234375],
    [-0.38646068, 0.31071443, 0.58613728, -0.64074002],
    [-0.40386962890625, 0.30950927734375, 0.5467529296875, -0.6649169921875],
    [-0.4208955, 0.30115059, 0.50785581, -0.68864924],
    [-0.4368896484375, 0.29205322265625, 0.46771240234375, -0.710693359375],
    [-0.45594543, 0.28464525, 0.42826652, -0.72641492],
    [-0.4739990234375, 0.276611328125, 0.38787841796875, -0.74053955078125],
    [-0.48991473, 0.27584436, 0.34492004, -0.75161401],
    [-0.5047607421875, 0.27447509765625, 0.30120849609375, -0.76104736328125],
    [-0.5116389, 0.27527944, 0.27964417, -0.76435987],
    [-0.51824951171875, 0.27593994140625, 0.2579345703125, -0.76727294921875],
    [-0.50103666, 0.27673524, 0.28943921, -0.76720585],
    [-0.483154296875, 0.27716064453125, 0.320556640625, -0.76611328125],
    [-0.44792307, 0.27991318, 0.40131478, -0.74830474],
    [-0.4090576171875, 0.2803955078125, 0.47882080078125, -0.72442626953125],
    [-0.36111792, 0.30263023, 0.55901631, -0.68228261],
    [-0.3092041015625, 0.321533203125, 0.633056640625, -0.63262939453125],
    [-0.27421452, 0.34212545, 0.68314869, -0.58400723],
    [-0.2374267578125, 0.3604736328125, 0.728759765625, -0.53155517578125],
    [-0.19217074, 0.37607163, 0.76938196, -0.47926186],
    [-0.1456298828125, 0.38916015625, 0.80487060546875, -0.42376708984375],
    [-0.07816495, 0.40538961, 0.84188048, -0.3475439],
    [-0.009765625, 0.416748046875, 0.8687744140625, -0.26715087890625],
    [0.04811837, 0.43977526, 0.87949021, -0.17544034],
    [0.10540771484375, 0.45733642578125, 0.8792724609375, -0.08154296875],
    [0.12324414, 0.46319612, 0.87732069, -0.0238465],
    [0.140625, 0.46734619140625, 0.87213134765625, 0.033935546875],
    [0.12895801, 0.41887692, 0.89824067, 0.03279729],
    [0.11688232421875, 0.36907958984375, 0.9215087890625, 0.03155517578125],
    [0.09730678, 0.3080107, 0.94608965, 0.02398253],
    [0.0772705078125, 0.2454833984375, 0.9661865234375, 0.01629638671875],
    [0.05866164, 0.18378401, 0.98113455, 0.01253977],
    [0.039794921875, 0.12127685546875, 0.99176025390625, 0.00872802734375],
    [0.01976279, -0.14197435, 0.98965343, 0.00622922],
    [-0.00164794921875, -0.39532470703125, 0.91851806640625, 0.0032958984375]
]

# Visualize rotation based on quaternion data
animate_rotation(quaternion_data)
